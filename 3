from agents.agent import Agent
import pddlgym
import networkx as nx
from construct.wrappers import PyperWrapper
from pyperplan.pddl.pddl import Type, Problem, Predicate
from pyperplan.pddl.parser import Parser
from pyperplan.planner import _ground, _search, _parse
from pyperplan.grounding import ground
from pyperplan.search.breadth_first_search import breadth_first_search
from pyperplan.search.a_star import astar_search
from pyperplan.search.a_star import greedy_best_first_search
from pyperplan.search.iterative_deepening_search import iterative_deepening_search
import random
import uuid
import copy
import networkx as nx
import click
import collections
# UPDATED to produce problem.pddl files instead of dealing with generating predicates etc.


class BiplexAgent(Agent):
    """
    Biplex
    """

    def __init__(self, ctx):
        super().__init__()
        self.config = ctx
        self.env = PyperWrapper(pddlgym.make(self.config['env']))
        self.env.fix_problem_index(1)
        self.env.reset()
        self.goal = self.config['goal']
        self.closed = []
        self.kg = nx.read_gml(self.config['resource_graph'])
        self.type_keyed_objects, self.token_keyed_objects = self._get_objects() # objects from current state
        self.bound_objects = {}
        self.stopper = True
        print("🍁 Biplex agent initialized.\n")

    def add_objects(self, constant, typing):
        """
        Adds object to type_keyed_objects and token_keyed_objects
        """

        if constant in self.token_keyed_objects:
            return True
        try:
            self.token_keyed_objects[constant] = str(typing)
            self.type_keyed_objects[str(typing)].add(str(constant))
            return True
        except:
            raise KeyError("Not able to add to objects dicts")

        return False


    def _solve(self):
        """
        High Level Planner

        Algorithm
        1. generate a plan sketch
        2. resolve non-executable/crafting actions (by proving the objects they are meant to create)
        - do above two steps until planner
        """

        click.secho(f"Goal: {self.goal}", fg='blue')

        # Initial planning and execution with Stripped Domain File
        goal_in = self.goal
        status, s1 = self.sketch(goal_in)
        if status:
            return status, s1
        return False, s1


    def sketch(self, goal_in):
        """
        High-level planner operating on the stripped domain
        The stripped domain has all the craft actions, but stripped down to zero precons
        """

        s0 = self.env.observe() # Getting current state

        # We now use the non-executable domain file
        non_exec_domain_file = "agents/biplex/bias/treasure_nonexec.pddl"
        plan = []
        executable = False

        # --- Preparing problem file ------ #
        # Ground the goal
        goal = self._ground_literal(goal_in)

        #We need to add objects from the craft actions
        # Look over nonexec domain and add objects from effects
        # we need to do this so it can come up with a plan for (have ?x-s)
        # TODO: Should this only run once? Not sure. Need to test
        parser = Parser(non_exec_domain_file)
        domain = parser.parse_domain()
        for name, action in domain.actions.items():
            if "*" in name:
                sig = action.signature
                if len(sig) > 1:
                    raise NotImplementedError(f"Cannot handle case where action has more than one param")
                typings = sig[0][1]
                if len(typings) > 1:
                    raise NotImplementedError(f"Cannot handle if object variable {sig[0]} has more than one type")
                typing = typings[0]
                arg = self._ground_arg(f"{sig[0]}-{typing}")


        objects = self._get_objects_from_dicts()
        init = set(self.env.observe())
        temp_problem_file = self._generate_temp_problem_file(goal, init, objects)
        plan = self.plan(problem_file=temp_problem_file, domain_file=non_exec_domain_file)
        executable, non_executables = self._is_plan_executable(plan)
        if plan and executable:
            print(f"\tThis is an executable plan")
            return self.execute(plan)

        if not plan:
            print(f"\tGive up. Bye.")
            return False, s0

        if not executable:
            objects_to_construct = set()
            # This means there are either non-executable actions or hypothetical actions
            for non_exec_action in non_executables:
                name, args = self._parse_literal(non_exec_action.name)
                for arg in args:
                    if "*" in arg:
                        if arg in self.bound_objects:## if already bound, then domain_file
                            continue
                        objects_to_construct.add(arg)

            for ob in objects_to_construct:
                status, s1 = self.prove(self.token_keyed_objects[ob])
                if not status:
                    print(f"Unable to construct object {ob}")
                    return False, s1
            return True, s1


        return False, s0

    def _get_objects_from_dicts(self):
        """
        Return a pddl friendly listing of objects
        """
        objects=[]
        for key, val in self.token_keyed_objects.items():
            objects.append(f"{key} - {val}")
        return objects

    def _ground_literal(self, literal):
        """
        returns a literal grounded in either objects the agent knows about OR is hypothesized
        """
        if self._is_grounded_literal(literal):
            return literal

        name, args = self._parse_literal(literal)
        grounded_args = []
        for arg in args:
            grounded_arg = self._ground_arg(arg)
            grounded_args.append(grounded_arg)

        return self._construct_literal(name, grounded_args)


    def _construct_literal(self, name, args):
        """
        Returns a literal based on name and args
        (have t23)
        """
        return f"({name} {' '.join(args)})"


    def _ground_arg(self, arg):
        """
        Returns a grounded arg
        NOTE: if the object is hypothetical, this is added via self.add_objects()
        """
        if self._is_grounded_arg(arg):
            return arg
        symbol, typing = self._parse_arg(arg)
        if self.type_keyed_objects[typing]:
            symbol = list(self.type_keyed_objects[typing])[0]
            return symbol
        hypo_sym = f"*{typing}_{str(uuid.uuid4())[:8]}"
        self.add_objects(hypo_sym, typing)
        return hypo_sym


    def _parse_arg(self, arg):
        """
        Returns symbol, typing
        input: ?x-t, t23-t, t23, *t234-t
        output: ?x,t  or t23,t or t23,t or *t234-t
        """

        if "?" in arg:
            if "-" in arg:
                symbol = arg.split("-")[0]
                typing = arg.split("-")[1]
                return symbol, typing
            else:
                raise ValueError(f"Argument ({arg}) Must have at least constant or type")
        if "-" in arg:
            symbol = arg.split("-")[0]
            typing = arg.split("-")[1]
            return symbol, typing

        symbol = arg
        try:
            typing = self.token_keyed_objects[symbol]
            return symbol, typing
        except:
            raise ValueError(f"The object {arg} does not exist anywhere")


    def _is_grounded_literal(self, literal):
        """
        Returns true of literal is grounded
        """

        name, args = self._parse_literal(literal)
        for arg in args:
            if not self._is_grounded_arg(arg):
                return False
        print(f"Literal {literal} is grounded")
        return True


    def _parse_literal(self, literal):
        """
        Gets name, and arguments from a string literal as a string, list
        note: an arg could be "t23" or "?x-t" or "t23-t", assuming well formed.
        """

        name = literal.replace("(","").replace(")","").split(" ")[0]
        args = literal.replace("(","").replace(")","").split(" ")[1:]
        return name, args

    def _is_grounded_arg(self, arg):
        """
        Given an arg, checks if it is grounded
        arg = "?x-t" or "t23" or "t23-t" or "*t234"
        """

        if "?" in arg:
            return False
        print(f"Argument {arg} is grounded")
        return True


    def _get_objects(self):
        """
        Returns objects as a dicts, keyed by types, keyed by object
        """

        type_keyed_objects = collections.defaultdict(set)
        token_keyed_objects = collections.defaultdict()
        state = self.env.observe() ###*** LOOKS AT ENV ***********
        relevant_objects = set()
        for literal in state:
            objects_in_lit = literal.replace("(","").replace(")","").split(" ")[1:]
            relevant_objects.update(objects_in_lit)

        for o in relevant_objects:
            type_val = self.env.objects()[o]
            type_keyed_objects[str(type_val)].add(o)
            token_keyed_objects[str(o)] = str(type_val)

        return type_keyed_objects, token_keyed_objects


    def prove(self, tnode):
        # Construction
        print(f"\tExpanding resource graph for {tnode} ...")
        s0 = self.env.observe()
        try:
            actions = list(self.kg.predecessors(str(tnode)))
        except:
            print(f"\tType {tnode} does not exist in the resource graph")
            return False, s0
        if not actions:
            print("\tNode exists, but has no predecessor actions")

        while actions:
            anode = actions.pop(0)
            status, s1 = self.ground(anode)
            if status:
                return status, s1

        return False, s0

    def ground(self, anode):
        # Node expansion
        precon_types = list(self.kg.predecessors(str(anode)))
        for tnode in precon_types:
            status, s1 = self.sketch(f"(have ?x-{tnode}")
            if not status:
                return False, s1

        # once all resources have been acquired, it is time to perform craft action
        # Full fledged navigation and manipulation planning
        print(f"\tAction {anode} is grounded.")
        new_domain_file = self._create_new_domain_file(self.kg, anode, self.config['bias'])
        goal = f"(have ?x-{list(self.kg.successors(anode))[0]})"
        # status, s1 = self.plan_execute(goal=goal, domain_file=new_domain_file)
        status, s1 = self.sketch(goal)
        if status:
            return status, s1
        return False, s1


    # Full fledged planning. Use carefully
    def plan(self, problem_file, domain_file):
        problem = _parse(domain_file, problem_file)
        task = _ground(problem)
        print(f"\tDomain: {domain_file}")
        print("\t*Planning*", end="\r")
        solution = breadth_first_search(task)
        print(f"\tPlan: {solution}")
        return solution


    def execute(self, plan):
        s0 = self.env.observe()
        if plan:
            print(f"\tExecuting actions:")
            for idx,a in enumerate(plan):
                click.secho(f"\t\t[{idx}] {a.name}", fg='red')
                s1 = self.env.step(a.name)
            return True, s1
        print("\tNo plan found")
        return False, s0


    def _generate_temp_problem_file(self, goal, init, objects):
        goal_line = f"(:goal {goal})"
        init_line = "(:init" + " " + " ".join(init) + ")"
        objects_line = "(:objects" + " " + " ".join(objects) + ")"
        domain_line = "(:domain treasure)" #HACK TODO need to fix
        define_line = "(define (problem treasure)" #HACK TODO fix

        self.problem_file = "agents/biplex/temp/problem_gen.pddl"
        with open(self.problem_file, "w+") as f:
            f.write(define_line)
            f.write("\n\n")
            f.write(domain_line)
            f.write("\n\n")
            f.write(objects_line)
            f.write("\n\n")
            f.write(init_line)
            f.write("\n\n")
            f.write(goal_line)
            f.write("\n\n")
            f.write(")")
        return self.problem_file


    def _is_plan_executable(self, plan):
        """
        Returns False if any part of the action literal contains a "*"
        (*craftk *k_b23132)
        (*crafk k2)
        (pickup *k_b242323)

        Also returns the action literal
        """
        nonexec_actions = []
        flag = True
        if not plan:
            return False, []
        for action in plan:
            if "*" in action.name:  #actually this is an Operator in Pyperplan representation
                flag = False
                nonexec_actions.append(action)
        if flag:
            return True, []
        return False, nonexec_actions










######################3
###################################################3
###+============================

    def _get_arg_types_for_lit(self, grounded_literal):
        if not self._is_lit_grounded(grounded_literal):
            return None
        args = literal.replace("(","").replace(")","").split(" ")
        for arg in args:
            type_object
        pass



        # TODO: some code repetition here with plan_execute(). Fix
        goal = self._ground_goal(goal_in)
        objects = self._get_objects_from_current_state(scope="state", domain_file=domain_file)


        # add the object from the goal
        goal_object = goal.replace("(","").replace(")","").split(" ")[1]
        goal_type = self.goal.replace("(","").replace(")","").split(" ")[1].split("-")[1]
        objects.add(f"{goal_object} - {goal_type}")
        objects = list(objects)


        init = set(self.env.observe())
        temp_problem_file = self._generate_temp_problem_file(goal, init, objects)
        plan = self.plan(problem_file=temp_problem_file, domain_file=non_exec_domain_file)
        executable = self._is_executable(plan)
        if plan and executable:
            print(f"\tThis is an executable plan")
            return self.execute(plan)

        # Now either there is no plan, or it is not executable
        n = 0
        subgoals = []
        while not plan or not executable:
            if not plan:
                print("\tNo plan sketch. need to try again")
                n += 1
                # Expand on the number of objects -- WE MUST GENERATE A PLAN SKETCH
                objects = self._get_objects_from_current_state(scope="domain")
                temp_problem_file = self._generate_temp_problem_file(goal, init, objects)
                plan = self.plan(problem_file=temp_problem_file, domain_file=non_exec_domain_file)
                executable = self._is_executable(plan)
                continue
            if executable:
                # execute
                return self.execute(plan)

            # there is a plan and it is not executable
            # Prove each of the craft nodes
            for a in plan:
                if '*' in a.name:
                    goal = self._generate_goal_from_action(a)
                    tnode = self._get_goal_object_type(goal)
                    print(f"Tnode: {tnode}")
                    status, s1 = self.prove(tnode)
                    if not status:
                        subgoals.append(goal)

            for s in subgoals:
                status, s1 = self.prove(s)
                return status, s1

    def plan_execute(self, goal, domain_file, scope="domain"):
        print(f"blaaa: {goal}")
        goal = self._ground_goal(goal)
        print(f"blaaa GROUNDED: {goal}")
        objects = self._get_objects_from_current_state(scope=scope, domain_file=domain_file)
        init = set(self.env.observe())
        temp_problem_file = self._generate_temp_problem_file(goal, init, objects)
        plan = self.plan(problem_file=temp_problem_file, domain_file=domain_file)
        executable = self._is_executable(plan)
        breakpoint()
        s0 = self.env.observe()
        if plan and executable:
            return self.execute(plan)
        else:
            return False, s0


    def _generate_goal_from_action(self, action):
        """
        Given action (craftt tqw)
        """
        # get the name of the action
        name = action.name.replace("*","").replace("(","").replace(")","").split(" ")[0]
        output = list(self.kg.successors(name))[0]
        return f"(have ?x-{str(output)})"


    def _get_objects_from_current_state(self, scope, domain_file=None):
        """
        scope = "state" or "have" or "action"
        "state": those objects in current state (appearing in any literal)
        "have": subset of 'state' objects appear in "have" or "inworld" literals.
        "domain": 1 object of every type mentioned in the domain file.
        """

        type_keyed_objects = collections.defaultdict(set)
        objects = []
        objects_have = []

        state = self.env.observe()
        relevant_objects = set()
        limited_objects = set()
        for literal in state:
            objects_in_lit = literal.replace("(","").replace(")","").split(" ")[1:]
            relevant_objects.update(objects_in_lit)
            if "have" in literal or "inworld" in literal:
                limited_objects.update(objects_in_lit)
        for o in relevant_objects:
            type_val = self.env.objects()[o]
            type_keyed_objects[str(type_val)].add(o)
            objects.append(f"{str(o)} - {str(type_val)}")
        for o in limited_objects:
            type_val = self.env.objects()[o]
            objects_have.append(f"{str(o)} - {str(type_val)}")

        # type_keyed_objects is a useful dict that contains object constants tied to
        # We can now add to this

        if scope == "have": # those objects that are in "have" or "inworld" predicates
            return set(objects_have)
        if scope == "state":
            return set(objects)
        if scope == "domain":
            if not domain_file:
                raise Error("No domain file!!")
            type_keyed_objects_domain = copy.deepcopy(type_keyed_objects)
            parser = Parser(domain_file)
            domain = parser.parse_domain()
            all_types = [x for x in list(domain.types.keys()) if "object" not in x]
            print(f">>> all : {all_types}")
            for t in all_types:
                if t not in type_keyed_objects_domain:
                    # now we need to "look" to find an object
                    ob,_ = self._find(t)
                    print(ob)
                    type_keyed_objects_domain[t].add(ob)

            for key, value in type_keyed_objects_domain.items():
                objects_of_type = [f"{x} - {key}" for x in value]
                objects.extend(objects_of_type)
            print(set(objects))
            return set(objects)


            raise NotImplementedError("scope='domain' is not yet implemented.")
        raise ValueError("Improper value provided to scope argument.")


        status, s1 = self.plan_execute(goal_in=self.goal, domain_file=non_exec_domain_file, execute=False, fast_mode=False)

        # It's now a resource acquisition problem
        tnode = self._get_goal_object_type(self.goal)
        # s0 = s1
        status, s1 = self.prove(tnode)

        print(f"\nHistory: {self.env.get_history()}")

        return {'plan':[], 'final_state':s1, "status":False}


#        ################
#        if fast_mode:
#            goal_entry = f"{goal_object} - {goal_type}"
#            if goal_entry not in set_objs:
#                # must be constructed since not anywhere in state
#                return False, s0
#            if goal_entry not in set_objs_have:
#                # is available somewhere in the state, but not readily useable
#                # might need to focus on acquiring some other resource and return to this
#                # return False, s0
#                pass
#        ####################


    def _create_new_domain_file(self, graph, anode, current_domain):
        action_symbol = f"\t(:action {anode}\n"
        precon_types = list(graph.predecessors(str(anode)))
        precons = []
        effects = []
        params = []
        for p in precon_types:
            variable = "?x"+str(uuid.uuid4())[:3]
            param = f"{variable} - {p}"
            pred = f"(have {variable})"
            effp = f"(not {pred})"
            precons.append(pred)
            effects.append(effp)
            params.append(param)

        eff_types = list(graph.successors(str(anode)))
        for e in eff_types:
            variable = "?y"+str(uuid.uuid4())[:3]
            param = f"{variable} - {e}"
            effp = f"(have {variable})"
            effects.append(effp)
            params.insert(0,param)

        param_line = f"\t\t:parameters ({' '.join(params)})\n"
        precon_line = f"\t\t:precondition (and {' '.join(precons)})\n"
        effects_line = f"\t\t:effect (and {' '.join(effects)}))"

        action_entry = action_symbol+param_line+precon_line+effects_line


        new_domain_filename = current_domain.split(".pddl")[0]+"_gen.pddl"
        with open(current_domain,'r') as current, open(new_domain_filename,'w') as secondfile:
            lines = current.readlines()
            for line in lines[:-1]:
                secondfile.write(line)
            secondfile.write("\n")
            secondfile.write(action_entry)
            secondfile.write("\n")
            secondfile.write(")")

        return new_domain_filename




    def _get_goal_object_type(self, goal):
        name = goal.replace("(","").replace(")","").split(" ")[0]
        args = goal.replace("(","").replace(")","").split(" ")[1:]

        # considering only one arg
        arg = args[0]
        if "?" in arg:
            if "-" in arg:
                typing = arg.split("-")[1]
                return typing
            else:
                raise ValueError("Must provide at least one of constant or a type")
        else:
            raise NotImplementedError("Need to implement a failed planning attempt on a grounded goal")

        return None


    def _ground_goal(self, atom_str):
        """
        Given an atom (have ?x-t) or (have t23) or (on ?x-t y24-y)  or (have ?t34-t)
        Return (have t23)
        """
        name = atom_str.replace("(","").replace(")","").split(" ")[0]
        args = atom_str.replace("(","").replace(")","").split(" ")[1:]
        new_args = []
        for arg in args:
            if "?" in arg:
                if "-" in arg:
                    typing = arg.split("-")[1]
                    new_sym, exists = self._find(typing)  #Find or look method.
                    if exists:
                        new_args.append(f"{new_sym}")
                    else:
                        return None
                else:
                    raise ValueError("Must provide at least one of constant or a type")
            else:
                if "-" in arg:
                    new_arg = arg.split("-")[0]
                    new_args.append(new_arg)
                else:
                    new_args.append(arg)
        new_atom = "("+name+" "+" ".join(new_args)+")"
        return new_atom




    def _find(self, object_type):
        """
        POTENTIAL ENV-AGENT INTERFACE BREACH WARNING: This method accesses self.env.objects( )
        Given an object type, returns an object identifier of that type in the world.
        Returns symbol, True if found. Returns hyposymbol, False if none

        This is meant to simulate the agent's vision system.
        We could imagine searching for it differently
        """
        print(f"\tLooking for object of type {object_type} in the world...")
        # Organize all the objects in the world as a dict  keyed by types
        objs = self.env.objects()  # CHANGE TO SELF.ENV
        type_keyed_objs = {}
        for k,v in objs.items():
            type_keyed_objs[v.name]= type_keyed_objs.get(v.name,[])
            type_keyed_objs[v.name].append(k)

        if object_type in type_keyed_objs:
            new_sym = random.choice(type_keyed_objs[object_type])
            print(f"\tObject {new_sym} of type {object_type} found")
            return new_sym, True

        hypo_sym = f"{object_type}_{str(uuid.uuid4())[:8]}"
        print(f"\tCould not find object of type {object_type}. Gensym: {hypo_sym}")
        return hypo_sym, False





    def _parse_trees_file(self, trees_file):
        trees = []
        # TODO: load file, generate a list of networkx trees
        return trees

